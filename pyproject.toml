[project.urls]
"Homepage" = "OCXStandard/ocx-common"
"Bug Tracker" = "OCXStandard/ocx-common/issues"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ocx_common"
version = "0.3.0"
description = "A python package with common classes and functions used across several projects"
authors = ["Ole Christian Astrup <ole.christianastrup@dnv.com>"]
readme = "README.md"
packages = [{ include = "ocx_common" }]

[tool.poetry.dependencies]
python = "^3.10"
packaging = "^24.1"
tbump = '*'
loguru = "*"
lxml = "*"
ocx = "^3.0.2"
pytest = "^8.2.2"


[tool.poetry.group.development.dependencies]
pre-commit = "*"
sourcery = '*'
poetry-plugin-export = "*"
ruff = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-regressions = "*"

[tool.poetry.group.docs.dependencies]
sphinx = "*"
sphinx-autodoc-typehints = "*"
sphinx_rtd_theme = "*"
sphinx-click = "*"
sphinx_automodapi = "*"

[tool.ruff]
# Exclude directories.
exclude = [
    ".github",
    ".coverage",
    ".idea",
    "docs",
    "htmlcov",
]

[tool.ruff.lint]
# 1. Enable flake8-bugbear (`B`) rules, in addition to the defaults.
select = ["E4", "E7", "E9", "F", "B"]

# 2. Avoid enforcing line-length violations (`E501`)
ignore = ["E501"]

# 3. Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false



[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
github_url = "OCXStandard/ocx-common"

[tool.tbump.version]
current = "0.3.0"

# Example of a semver regexp.
# Make sure this matches current_version before using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (
    (?P<extra>.+)
  )?
  '''


[[tool.tbump.field]]
# the name of the field
name = "extra"
# the default value to use, if there is no match
default = ""

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.

[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "./ocx_common/__init__.py"

[[tool.tbump.file]]
src = "./docs/conf.py"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

# Or run some commands after the git tag and the branch
# have been pushed:
# [[tool.tbump.after_push]]
# name = "build"
# cmd = "poetry build"

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = [
    "tests",
]